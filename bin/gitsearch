#!/usr/bin/env ruby

require 'gli'
require 'gitsearch'

include GLI::App

program_desc 'Describe your application here'

version Gitsearch::VERSION

subcommand_option_handling :normal
arguments :strict

desc 'Run in verbose mode'
switch [:verbose], negatable: false

desc 'Search a repository on Github with a simple query'
arg_name 'The query'
command :search do |c|
  c.flag [:language, :l], default_value: nil, desc: "The language"
  c.action do |global_options,options,args|

    raise "you must have at least one query argument, none found" if args.empty?

    query = args.join(" ")
    puts "Searching github for #{query}" if global_options[:verbose]

    Gitsearch.search(query, options[:language], global_options[:verbose])
  end
end

desc 'Delete existing data'
arg_name 'Batch of repository ids seperated by spaces'
command :delete do |c|

  c.flag [:log, :l], default_value: nil, desc: "Deletes all ids refering to a specific log id"
  c.action do |global_options,options,args|
    raise "At least one repository ID or a log id must be specified" unless args || options[:log]

    puts "Deleting #{args}" if global_options[:verbose]

    Gitsearch.delete(args, options[:log])
  end
end

desc 'List repositories'
arg_name 'Listing'
command :list do |c|
  c.flag [:log], default_value: nil, desc: "List all repositories included in a specific log id"
  c.flag [:language, :l], default_value: nil, desc: "List all repositories of a specified programming language"
  c.switch [:description, :d], desc: "Display repository's description"
  c.action do |global_options, options, args|
      raise "Cannot have a log id and repositories id as arguments" if options[:log] && !args.empty?

      db = Database.new
      repos = []

      if options[:log] then
        puts "Fetching repositories from log" if global_options[:verbose]
        repos = Gitsearch.list_by_ids()
      end

      if !args.empty?
        puts "Fetching repositories from arguments" if global_options[:verbose]
        repos = Gitsearch.list_by_ids(args)
      end

      if repos.empty? then
        puts "Fetching all repositories" if global_options[:verbose]
        repos = Gitsearch.list_all()
      end

       if options[:language] then
        puts "Filtering repositories by language: #{options[:language]}" if global_options[:verbose]
        repos = Gitsearch.filter_by_lang(repos, options[:language])
      end

      repos.each do |repo|
        if repo then
          puts "----------" + "\n"
          puts "Name: #{repo["name"]}" + "\n"
          puts "Github URL: #{repo["html_url"]}" + "\n"
          puts "External Repository id: #{repo["id"]}"
          puts wrap("Description: #{repo["description"]}") if options[:description]
        end
      end
  end
end

desc 'Clone repository'
arg_name 'Clone'
command :clone do |c|
  c.action do |global_options, options, args|
    raise "A repository ID and a full path are required" if args.length != 2

    path = Pathname.new(args[1])
    raise "The path must be absolute" unless path.absolute?

    db = Database.new
    repo = db.find_by(args[0].to_sym)
    url = repo["clone_url"] if repo

    raise "Repository not found: #{args[0]}" unless url

    if global_options[:verbose] then
      `git clone #{url} #{path} -v`
    else
      `git clone #{url} #{path} -q`
    end

    raise "Error while cloning repository: #{repo["name"]}" if $?.exitstatus != 0
  end
end


pre do |global,command,options,args|
  true
end

post do |global,command,options,args|
  true
end

on_error do |exception|
  true
end

def wrap(description, width=78)
  description.gsub(/(.{1,#{width}})(\s+|\Z)/, "\\1\n")
end


exit run(ARGV)
